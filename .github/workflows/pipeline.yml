name: Pipeline

on:
  push:
    branches:
      - CI/CD-pipeline

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.13

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up database
        run: |
          cd alumni
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput

      - name: Collect static files
        run: |
          cd alumni
          python manage.py collectstatic --noinput

  test:
    runs-on: ubuntu-latest

    needs: build

    env:
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.13

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up database
        run: |
          cd alumni
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput

      - name: Collect static files
        run: |
          cd alumni
          python manage.py collectstatic --noinput

      - name: Run tests
        run: |
          cd alumni
          python manage.py test

  deploy:
    runs-on: ubuntu-latest

    needs: test

    env:
      EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
      EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
      EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
      DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: 3.10.13

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Set up database
        run: |
          cd alumni
          python manage.py makemigrations --noinput
          python manage.py migrate --noinput

      - name: Collect static files
        run: |
          cd alumni
          python manage.py collectstatic --noinput

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/my-django-app:latest

      - name: Connect to VM via SSH and Deploy Docker Container
        uses: appleboy/ssh-action@master
        with:
          host: 130.193.43.164
          username: angelika
          key: ${{ secrets.KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          port: 22
          script: |
            if [ "$(docker ps -q)" ]; then
              sudo docker kill $(docker ps -q) &> /dev/null
            fi
            if [ "$(docker ps -a -q)" ]; then
              sudo docker rm $(docker ps -a -q) &> /dev/null
            fi
            sudo echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
            sudo docker pull "${{ secrets.DOCKER_USERNAME }}"/my-django-app:latest
            sudo docker run -d --name alumni -p 80:80 "${{ secrets.DOCKER_USERNAME }}"/my-django-app:latest


